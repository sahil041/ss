32 Bit ALU

Verilog Code for 32 bit ALU using CASE Statement (.v file)

module alu_32bit_case(y,a,b,f);
input [31:0]a;
input [31:0]b;
input [2:0]f;
output reg [31:0]y;
always@(*)
begin
case(f)
3'b000:y=a&b;
//AND Operation
3'b001:y=a|b;
//OR Operation
3'b010:y=~(a&b);
//NAND Operation
3'b011:y=~(a|b);
//NOR Operation
3'b100:y=a+b;
//Addition
3'b101:y=a-b;
//Subtraction
3'b110:y=a*b;
//Multiply
3'b111:y=a/b;
//division
default:y=32'bx;
endcase
end
endmodule


Test Bench (.v file)

module alu_32bit_tb_case;
reg [31:0]a;
reg [31:0]b;
reg [2:0]f;
wire [31:0]y;
alu_32bit_case test2(.y(y),.a(a),.b(b),.f(f));
initial
begin
a=32'h00000000;
b=32'hFFFFFFFF;
#10 f=3'b000;
#10 f=3'b001;
#10 f=3'b010;
#10 f=3'b100;
end
initial
#50 $finish;
endmodule


Script (.tcl file)

read_lib /home/install/FOUNDRY/digital/45nm/dig/lib/slow.lib
set_db lef_library {/home/install/FOUNDRY/digital/45nm/dig/lef/gsclib045_tech.lef 
/home/install/FOUNDRY/digital/45nm/dig/lef/gsclib045_macro.lef}
read_hdl alu_case.v
elaborate
set_input_delay -max 0.2 [get_ports "a"]
set_input_delay -max 0.25 [get_ports "b"]
set_output_delay -max 0.2 [get_ports "y"]
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
write_hdl > alu_case_netlist.v
write_sdc > alu_case_sdc.sdc
report_power > alu_case_power.rpt
report_area > alu_case_area.rpt
report_gates > alu_case_gates.rpt
report_timing -unconstrained > alu_case_timing.rpt
gui_show